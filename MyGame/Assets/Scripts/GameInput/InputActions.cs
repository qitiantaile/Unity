//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameInput
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""7b278406-4435-494b-b3cc-b4701db751ed"",
            ""actions"": [
                {
                    ""name"": ""NextItem"",
                    ""type"": ""Button"",
                    ""id"": ""31499e67-5518-43d6-8d76-0f08d91e366e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousItem"",
                    ""type"": ""Button"",
                    ""id"": ""ff5da466-aefc-4952-89bd-74c5bcebf56c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrowItem"",
                    ""type"": ""Button"",
                    ""id"": ""cbcccb1c-e88a-4abb-ac66-d4a20543acfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fe0a4b02-6fec-4015-9438-dce547d7aa77"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""a88208f4-6d0a-4e90-be29-7052e295a488"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fight"",
                    ""type"": ""Button"",
                    ""id"": ""9bc58b03-4ba0-4012-ae21-686b039f355b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ready"",
                    ""type"": ""Button"",
                    ""id"": ""501ae571-8817-4f6c-9004-56b124d903aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f96fd13e-c834-4d1c-91bf-01ac9ba35119"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffc3b42b-ea6f-48a5-a3c5-b2e71e4d2540"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1053604-f1e3-4420-ad5f-28185c060dea"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrowItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""426af224-43ac-4e53-8717-334ae5b0271f"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""097900bb-6d7a-4575-8b37-7faadf0665dc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""60543910-2e72-4d82-8e34-2076771134c8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""837f279a-fd2b-46a4-ada0-fc7c0c89b9c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6f82ab0d-ad52-4401-88b8-ac10bf6d9806"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""417fa6b6-2a8c-4e6f-a900-1aa9d0b1d97d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""128d71ab-d430-4e17-82bd-c8ea8ecf8d83"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9169c91e-d366-4293-a248-9ee4b2c86f8d"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df4cb54c-af7f-4ab2-956b-fc92fa7df12a"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ready"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Game
            m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
            m_Game_NextItem = m_Game.FindAction("NextItem", throwIfNotFound: true);
            m_Game_PreviousItem = m_Game.FindAction("PreviousItem", throwIfNotFound: true);
            m_Game_ThrowItem = m_Game.FindAction("ThrowItem", throwIfNotFound: true);
            m_Game_Move = m_Game.FindAction("Move", throwIfNotFound: true);
            m_Game_Jump = m_Game.FindAction("Jump", throwIfNotFound: true);
            m_Game_Fight = m_Game.FindAction("Fight", throwIfNotFound: true);
            m_Game_Ready = m_Game.FindAction("Ready", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Game
        private readonly InputActionMap m_Game;
        private IGameActions m_GameActionsCallbackInterface;
        private readonly InputAction m_Game_NextItem;
        private readonly InputAction m_Game_PreviousItem;
        private readonly InputAction m_Game_ThrowItem;
        private readonly InputAction m_Game_Move;
        private readonly InputAction m_Game_Jump;
        private readonly InputAction m_Game_Fight;
        private readonly InputAction m_Game_Ready;
        public struct GameActions
        {
            private @InputActions m_Wrapper;
            public GameActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @NextItem => m_Wrapper.m_Game_NextItem;
            public InputAction @PreviousItem => m_Wrapper.m_Game_PreviousItem;
            public InputAction @ThrowItem => m_Wrapper.m_Game_ThrowItem;
            public InputAction @Move => m_Wrapper.m_Game_Move;
            public InputAction @Jump => m_Wrapper.m_Game_Jump;
            public InputAction @Fight => m_Wrapper.m_Game_Fight;
            public InputAction @Ready => m_Wrapper.m_Game_Ready;
            public InputActionMap Get() { return m_Wrapper.m_Game; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
            public void SetCallbacks(IGameActions instance)
            {
                if (m_Wrapper.m_GameActionsCallbackInterface != null)
                {
                    @NextItem.started -= m_Wrapper.m_GameActionsCallbackInterface.OnNextItem;
                    @NextItem.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnNextItem;
                    @NextItem.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnNextItem;
                    @PreviousItem.started -= m_Wrapper.m_GameActionsCallbackInterface.OnPreviousItem;
                    @PreviousItem.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnPreviousItem;
                    @PreviousItem.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnPreviousItem;
                    @ThrowItem.started -= m_Wrapper.m_GameActionsCallbackInterface.OnThrowItem;
                    @ThrowItem.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnThrowItem;
                    @ThrowItem.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnThrowItem;
                    @Move.started -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnMove;
                    @Jump.started -= m_Wrapper.m_GameActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnJump;
                    @Fight.started -= m_Wrapper.m_GameActionsCallbackInterface.OnFight;
                    @Fight.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnFight;
                    @Fight.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnFight;
                    @Ready.started -= m_Wrapper.m_GameActionsCallbackInterface.OnReady;
                    @Ready.performed -= m_Wrapper.m_GameActionsCallbackInterface.OnReady;
                    @Ready.canceled -= m_Wrapper.m_GameActionsCallbackInterface.OnReady;
                }
                m_Wrapper.m_GameActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @NextItem.started += instance.OnNextItem;
                    @NextItem.performed += instance.OnNextItem;
                    @NextItem.canceled += instance.OnNextItem;
                    @PreviousItem.started += instance.OnPreviousItem;
                    @PreviousItem.performed += instance.OnPreviousItem;
                    @PreviousItem.canceled += instance.OnPreviousItem;
                    @ThrowItem.started += instance.OnThrowItem;
                    @ThrowItem.performed += instance.OnThrowItem;
                    @ThrowItem.canceled += instance.OnThrowItem;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Fight.started += instance.OnFight;
                    @Fight.performed += instance.OnFight;
                    @Fight.canceled += instance.OnFight;
                    @Ready.started += instance.OnReady;
                    @Ready.performed += instance.OnReady;
                    @Ready.canceled += instance.OnReady;
                }
            }
        }
        public GameActions @Game => new GameActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        public interface IGameActions
        {
            void OnNextItem(InputAction.CallbackContext context);
            void OnPreviousItem(InputAction.CallbackContext context);
            void OnThrowItem(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnFight(InputAction.CallbackContext context);
            void OnReady(InputAction.CallbackContext context);
        }
    }
}
